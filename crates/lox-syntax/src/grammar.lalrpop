use crate::{ast, lexer};

grammar;

pub Program: ast::Program = <stmts:Decl*> => ast::Program { <> };

Decl = {
    DeclFun,
    Stmt,
}

DeclFun: ast::Stmt =
    "fun" <name:identifier> "(" <params:Params> ")" <body:StmtBlockInternal> =>
        ast::Stmt::Fun(Box::new(ast::StmtFun { <> }));

Params: Vec<String> = {
    <first:identifier> <rest:("," <identifier>)*> => {
        let mut params = Vec::with_capacity(1 + rest.len());
        params.push(first);
        params.extend(rest);
        params
    },
    () => Vec::new(),
};

// https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers
Stmt = {
    StmtOpen,
    StmtClosed,
}

StmtOpen: ast::Stmt = {
    "if" "(" <cond:Expr> ")" <then:Stmt> =>
        ast::Stmt::If(Box::new(ast::StmtIf { <>, else_: None })),
    "if" "(" <cond:Expr> ")" <then:StmtClosed> "else" <else_:StmtOpen> =>
        ast::Stmt::If(Box::new(ast::StmtIf { cond, then, else_: Some(else_) })),
    "while" "(" <cond:Expr> ")" <body:StmtOpen> =>
        ast::Stmt::While(Box::new(ast::StmtWhile { <> })),
    "for" "(" <init:ForInit> <cond:ForCond> <incr:ForIncr> ")" <body:StmtOpen> =>
        ast::Stmt::For(Box::new(ast::StmtFor { <> })),
}

StmtClosed: ast::Stmt = {
    StmtSimple,
    "if" "(" <cond:Expr> ")" <then:StmtClosed> "else" <else_:StmtClosed> =>
        ast::Stmt::If(Box::new(ast::StmtIf { cond, then, else_: Some(else_) })),
    "while" "(" <cond:Expr> ")" <body:StmtClosed> =>
        ast::Stmt::While(Box::new(ast::StmtWhile { <> })),
    "for" "(" <init:ForInit> <cond:ForCond> <incr:ForIncr> ")" <body:StmtClosed> =>
        ast::Stmt::For(Box::new(ast::StmtFor { <> })),
}

ForInit: Option<ast::Stmt> = {
    <StmtVar> => Some(<>),
    <StmtExpr> => Some(<>),
    ";" => None,
}

ForCond: Option<ast::Expr> = {
    <Expr> ";" => Some(<>),
    ";" => None,
}

ForIncr: Option<ast::Expr> = {
    <Expr> => Some(<>),
    () => None
};

StmtSimple = {
    StmtBlock,
    StmtExpr,
    StmtPrint,
    StmtReturn,
    StmtVar,
}

StmtBlock: ast::Stmt = StmtBlockInternal => ast::Stmt::Block(<>);

StmtBlockInternal: ast::StmtBlock = "{" <stmts:Decl*> "}" =>
    ast::StmtBlock { <> };

StmtExpr: ast::Stmt =
    <value:Expr> ";" => ast::Stmt::Expr(ast::StmtExpr { <> });

StmtPrint: ast::Stmt =
    "print" <value:Expr> ";" => ast::Stmt::Print(ast::StmtPrint { <> });

StmtReturn: ast::Stmt =
    "return" <value:Expr?> ";" => ast::Stmt::Return(ast::StmtReturn { <> });

StmtVar: ast::Stmt = {
    "var" <name:identifier> "=" <value:Expr> ";" =>
        ast::Stmt::Var(ast::StmtVar { name, value: Some(value) }),
    "var" <name:identifier> ";" =>
        ast::Stmt::Var(ast::StmtVar { name, value: None }),
};

Expr = ExprAssign;

ExprAssign = {
    <name:identifier> "=" <value:Expr> =>
        ast::Expr::Assign(Box::new(ast::ExprAssign { <> })),
    ExprLogicOr,
}

ExprLogicOr = ExprInfix<ExprLogicOr, OpLogicOr, ExprLogicAnd>;
OpLogicOr: ast::OpInfix = "or" => ast::OpInfix::LogicOr;

ExprLogicAnd = ExprInfix<ExprLogicAnd, OpLogicAnd, ExprEquality>;
OpLogicAnd: ast::OpInfix = "and" => ast::OpInfix::LogicAnd;

ExprEquality = ExprInfix<ExprEquality, OpEquality, ExprComparison>;
OpEquality: ast::OpInfix = {
    "==" => ast::OpInfix::Equal,
    "!=" => ast::OpInfix::NotEqual,
}

ExprComparison = ExprInfix<ExprComparison, OpComparison, ExprTerm>;
OpComparison: ast::OpInfix = {
    ">" => ast::OpInfix::Greater,
    ">=" => ast::OpInfix::GreaterEqual,
    "<" => ast::OpInfix::Less,
    "<=" => ast::OpInfix::LessEqual,
}

ExprTerm = ExprInfix<ExprTerm, OpTerm, ExprFactor>;
OpTerm: ast::OpInfix = {
    "+" => ast::OpInfix::Add,
    "-" => ast::OpInfix::Subtract,
}

ExprFactor = ExprInfix<ExprFactor, OpFactor, ExprPrefix>;
OpFactor: ast::OpInfix = {
    "*" => ast::OpInfix::Multiply,
    "/" => ast::OpInfix::Divide,
}

ExprPrefix: ast::Expr = {
    <op:OpPrefix> <rt:ExprPrefix> =>
        ast::Expr::Prefix(Box::new(ast::ExprPrefix { <> })),
    ExprCall,
}
OpPrefix: ast::OpPrefix = {
    "-" => ast::OpPrefix::Negate,
    "!" => ast::OpPrefix::Not,
}

ExprCall: ast::Expr = {
    <callee:ExprCall> "(" <args:Args> ")" => {
        ast::Expr::Call(Box::new(ast::ExprCall { callee, args }))
    },
    ExprPrimary,
};

Args: Vec<ast::Expr> = {
    <first:Expr> <rest:("," <Expr>)*> => {
        let mut args = Vec::with_capacity(1 + rest.len());
        args.push(first);
        args.extend(rest);
        args
    },
    () => Vec::new(),
}

ExprPrimary: ast::Expr = {
    <ExprLiteral> => ast::Expr::Literal(<>),
    <ExprVariable> => ast::Expr::Variable(<>),
    "(" <Expr> ")",
}

ExprLiteral: ast::ExprLiteral = {
    "nil" => ast::ExprLiteral::Nil,
    "false" => ast::ExprLiteral::Bool(false),
    "true" => ast::ExprLiteral::Bool(true),
    string => ast::ExprLiteral::String(<>),
    number => ast::ExprLiteral::Number(<>),
}

ExprVariable: ast::ExprVariable =
    <name:identifier> => ast::ExprVariable { <> };

ExprInfix<Lt, Op, Rt>: ast::Expr = {
    <lt:Lt> <op:Op> <rt:Rt> =>
        ast::Expr::Infix(Box::new(ast::ExprInfix { <> })),
    Rt,
}

extern {
    type Location = usize;
    type Error = lexer::LexerError;

    enum lexer::Token {
        // Single-character tokens.
        "(" => lexer::Token::LtParen,
        ")" => lexer::Token::RtParen,
        "{" => lexer::Token::LtBrace,
        "}" => lexer::Token::RtBrace,
        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        "-" => lexer::Token::Minus,
        "+" => lexer::Token::Plus,
        ";" => lexer::Token::Semicolon,
        "/" => lexer::Token::Slash,
        "*" => lexer::Token::Asterisk,

        // One or two character tokens.
        "!" => lexer::Token::Bang,
        "!=" => lexer::Token::BangEqual,
        "=" => lexer::Token::Equal,
        "==" => lexer::Token::EqualEqual,
        ">" => lexer::Token::Greater,
        ">=" => lexer::Token::GreaterEqual,
        "<" => lexer::Token::Less,
        "<=" => lexer::Token::LessEqual,

        // Literals.
        identifier => lexer::Token::Identifier(<String>),
        string => lexer::Token::String(<String>),
        number => lexer::Token::Number(<f64>),

        // Keywords.
        "and" => lexer::Token::And,
        "class" => lexer::Token::Class,
        "else" => lexer::Token::Else,
        "false" => lexer::Token::False,
        "for" => lexer::Token::For,
        "fun" => lexer::Token::Fun,
        "if" => lexer::Token::If,
        "nil" => lexer::Token::Nil,
        "or" => lexer::Token::Or,
        "print" => lexer::Token::Print,
        "return" => lexer::Token::Return,
        "super" => lexer::Token::Super,
        "this" => lexer::Token::This,
        "true" => lexer::Token::True,
        "var" => lexer::Token::Var,
        "while" => lexer::Token::While,
    }
}
